{"version":3,"sources":["store/events/types.ts","components/cards/card.tsx","components/util/spinner.tsx","store/events/action.ts","components/cards/cards.tsx","components/util/select.tsx","components/sideBar.tsx","components/home.tsx","components/detailpage.tsx","App.tsx","store/events/reducer.ts","store/rootReducer.ts","store/store.ts","index.tsx"],"names":["ActionsTypes","Card","event","id","name","images","dates","_embedded","push","useHistory","className","src","url","alt","onClick","start","localDate","venues","Spinner","Cards","fetchEvents","dispatch","useDispatch","a","page","setEventsLoading","axios","get","res","type","types","payload","data","events","loadingState","setLoading","useAction","useState","setPage","useEffect","useSelector","state","loading","map","i","Pagination","onChange","_","value","count","color","defaultPage","Select","placeholder","item","Sidebar","Homepage","Detailpage","props","App","exact","path","component","Home","initialState","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e9d3ca4c.chunk.js","sourcesContent":["import { FetchEventActionI, LoadingEventActionI } from './action';\r\n\r\nexport enum ActionsTypes {\r\n    fetchEvents,\r\n    setLoading\r\n}\r\n\r\nexport type Action = FetchEventActionI | LoadingEventActionI","import { useHistory } from \"react-router-dom\"\r\nimport { EventI } from \"../../store/events/action\"\r\n\r\ninterface CardPropsI {\r\n\tevent: EventI\r\n}\r\n\r\nexport const Card: React.FC<CardPropsI> = ({event}) => {\r\n\tconst {id, name, images, dates , _embedded } = event\r\n\r\n\t//use history\r\n\tconst { push } = useHistory()\r\n\treturn (\r\n\t\t\t<section className='card'>\r\n\t\t\t\t<img src={images[0].url} alt='flag images' />\r\n\t\t\t\t<h3 onClick={() => push(`/${id}`)}>{name}</h3>\r\n\t\t\t\t<p>{dates.start.localDate}</p>\r\n\t\t\t\t<h4>{_embedded?.venues[0].name}</h4>\r\n\t\t\t</section>\r\n\t)\r\n}\r\n\r\nexport default Card\r\n","export const Spinner: React.FC = () => {\r\n    return(\r\n        <section className=\"spinner\">\r\n            <img src=\"/spinner.gif\" alt=\"loading-spinner\" />\r\n        </section>\r\n    )\r\n}","import { QueryParamsFetchEventsI } from './../../components/cards/cards';\r\nimport { useDispatch } from \"react-redux\"\r\nimport axios from 'axios'\r\nimport { ActionsTypes as types } from './types'\r\n\r\nconst url: string = \"https://app.ticketmaster.com/discovery/v2/events.json?apikey=sK6sqAtjpwLuOky6TFLJVidiimUvGYaB\"  \r\n\r\n\r\nexport interface FetchEventActionI {\r\n    type: types.fetchEvents,\r\n    payload: EventI[]\r\n}\r\n\r\nexport interface LoadingEventActionI {\r\n    type: types.setLoading,\r\n    payload: boolean\r\n}\r\n\r\nexport interface UseActionI {\r\n    fetchEvents: (queryParams: QueryParamsFetchEventsI) => Promise<void>,\r\n    setEventsLoading: (loadingState: boolean) => void\r\n}\r\n\r\n\r\nexport interface EventI {\r\n    id: string,\r\n    name: string,\r\n    url: string,\r\n    images: {\r\n        url: string,\r\n    }[],\r\n    dates: {\r\n        start: {\r\n            localDate: string\r\n        }\r\n    },\r\n    products?:{\r\n        id: string,\r\n        url: string,\r\n        name: string\r\n    }[],\r\n    _embedded?: {\r\n        venues: {\r\n            name: string\r\n        }[]\r\n    }\r\n}\r\n\r\ninterface ResEventDataI {\r\n    _embedded:{\r\n        events: EventI[]\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const useAction = (): UseActionI => {\r\n    const dispatch = useDispatch()\r\n\r\n    //a function for fetching events\r\n    const fetchEvents = async ({page}: QueryParamsFetchEventsI): Promise<void> => {\r\n    setEventsLoading(true)\r\n    const res = await axios.get<ResEventDataI>(url + `&page=${page}`)\r\n\r\n    setEventsLoading(false)\r\n\r\n    dispatch<FetchEventActionI>({\r\n        type: types.fetchEvents,\r\n        payload: res.data._embedded.events\r\n    })\r\n    }\r\n\r\n    //a function for setting loading state\r\n    const setEventsLoading = (loadingState: boolean): void => {\r\n        dispatch<LoadingEventActionI>({\r\n            type: types.setLoading,\r\n            payload: loadingState \r\n        })\r\n    }\r\n\r\n\r\n    return {\r\n        fetchEvents,\r\n        setEventsLoading\r\n    }\r\n}","import {Card} from \"./card\"\r\n//material ui pagination\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\n//store interface\r\nimport { StoreStateT } from '../../store/rootReducer'\r\n//redux\r\nimport { useSelector } from 'react-redux'\r\nimport { Spinner } from \"../util/spinner\"\r\nimport { useEffect, useState } from \"react\"\r\nimport { useAction } from \"../../store/events/action\"\r\n\r\nexport interface QueryParamsFetchEventsI {\r\n    page?: number,\r\n    id?: string\r\n}\r\n\r\ninterface CardsPropsI {\r\n}\r\n\r\nexport const Cards: React.FC<CardsPropsI> = () => {\r\n\r\n    const { fetchEvents } = useAction()\r\n\r\n    //local state\r\n    const [page , setPage] = useState<number>(1)\r\n\r\n    // call on render\r\n    useEffect(()=>{\r\n        const queryParams: QueryParamsFetchEventsI = {\r\n            page: page\r\n        }\r\n        fetchEvents(queryParams)\r\n    },[page])\r\n\r\n    //store state\r\n    const events = useSelector((state: StoreStateT) => state.events.events)\r\n    const loadingEvents = useSelector((state: StoreStateT) => state.events.loading)\r\n    \r\n\treturn loadingEvents ? <Spinner /> : (\r\n        <div className=\"cards-container\">\r\n        <div className=\"cards\">\r\n            {\r\n                events.map((event , i) => (\r\n                    <Card key={i} event={event} />\r\n                ))\r\n            }\r\n        </div>\r\n        <section className=\"pagination-section\">\r\n        <Pagination\r\n        page={page}\r\n        onChange={(_, value) => setPage(value)}\r\n        count={49}\r\n        color=\"primary\"\r\n        defaultPage={1}\r\n      />\r\n        </section>\r\n        </div>\r\n\t)\r\n}\r\n","import { EventI } from \"../../store/events/action\"\r\n\r\ninterface PropsI {\r\n    events: EventI[]\r\n}\r\n\r\nexport const Select: React.FC<PropsI> = ({events}) => {\r\n    return <select placeholder=\"Select One\">\r\n        {\r\n            events.map((item , i) => (\r\n                <option key={i} value={item.id}>{item.name}</option>\r\n            ))\r\n        }\r\n    </select>\r\n}","import { useSelector } from \"react-redux\"\r\nimport { StoreStateT } from \"../store/rootReducer\"\r\nimport { Select } from \"./util/select\"\r\n\r\nexport const Sidebar: React.FC = () => {\r\n    const events = useSelector((state: StoreStateT) => state.events.events)\r\n\r\n    return(\r\n        <div className=\"sidebar\">\r\n            <h1>Events</h1>\r\n            <Select events={events}  />\r\n            <Select events={events}  />\r\n            <Select events={events}  />\r\n            <Select events={events}  />\r\n\r\n            <section className=\"button-section\">\r\n                <button>Filter</button>\r\n            </section>\r\n        </div>\r\n    )\r\n}","import { Cards } from \"./cards\"\r\nimport { Sidebar } from \"./sideBar\"\r\n\r\nexport const Homepage: React.FC = () => {\r\n    return(\r\n        <div className=\"homepage-grid\">\r\n            <Sidebar />\r\n            <Cards />\r\n        </div>\r\n    )\r\n}","\r\n\r\n\r\nexport const Detailpage: React.FC = (props) => {\r\n    return(\r\n        <div className=\"detailpage\">\r\n            <h1>Specific Detail Page</h1>\r\n        </div>\r\n    )\r\n}","import { Homepage as Home } from './components';\nimport './styles/main.scss';\nimport { BrowserRouter as Router , Route , Switch } from 'react-router-dom'\nimport { Detailpage } from './components/detailpage';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/:id\" component={Detailpage} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import { EventI } from './action';\r\nimport { Action, ActionsTypes } from \"./types\";\r\n\r\nexport interface InitialStateI {\r\n    events: EventI[],\r\n    loading: boolean\r\n}\r\n\r\nconst initialState: InitialStateI = {\r\n    events: [],\r\n    loading: true\r\n}\r\n\r\nexport const reducer = (state: InitialStateI = initialState , action: Action) => {\r\n    switch(action.type){\r\n        case ActionsTypes.fetchEvents: {\r\n            return {\r\n                ...state,\r\n                events: action.payload\r\n            }\r\n        }\r\n        case ActionsTypes.setLoading: {\r\n            return {\r\n                ...state,\r\n                loading: action.payload\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}","import { combineReducers } from 'redux'\r\nimport { reducer as eventsReducer } from './events/reducer'\r\n\r\n\r\nexport const rootReducer = combineReducers({\r\n    events: eventsReducer\r\n})\r\n\r\nexport type StoreStateT = ReturnType<typeof rootReducer>","import { createStore, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport { rootReducer } from './rootReducer'\r\n\r\nexport const store = createStore(rootReducer , applyMiddleware(thunk))","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport { Provider } from 'react-redux'\nimport { store } from './store/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}